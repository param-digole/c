#include <stdio.h> 
int main() { 
    int n, i, tq; 
    int pid[20], at[20], bt[20], rt[20]; 
    int ct[20], tat[20], wt[20]; 
    int current_time = 0, completed_count = 0; 
    int total_tat = 0, total_wt = 0; 
    float avg_tat, avg_wt; 
    int queue[50], front = 0, rear = 0; 
 
    printf("Enter number of processes: "); 
    scanf("%d", &n); 
 
    for (i = 0; i < n; i++) { 
        pid[i] = i + 1; 
        printf("\nProcess %d:\n", pid[i]); 
        printf("Arrival Time: "); 
        scanf("%d", &at[i]); 
        printf("Burst Time: "); 
        scanf("%d", &bt[i]); 
        rt[i] = bt[i]; 
    } 
 
    printf("\nEnter Time Quantum: "); 
    scanf("%d", &tq); 
 
    int visited[20] = {0}, idx = -1; 
    for (i = 0; i < n; i++) 
        if (idx == -1 || at[i] < at[idx]) 
            idx = i; 
 
    current_time = at[idx]; 
    queue[rear++] = idx; 
    visited[idx] = 1; 
 
    while (completed_count < n) { 
        int cur = queue[front++]; 
        if (rt[cur] > tq) { 
            rt[cur] -= tq; 
            current_time += tq; 
        } else { 
            current_time += rt[cur]; 
            rt[cur] = 0; 
            completed_count++; 
            ct[cur] = current_time; 
            tat[cur] = ct[cur] - at[cur]; 
            wt[cur] = tat[cur] - bt[cur]; 
            total_tat += tat[cur]; 
            total_wt += wt[cur]; 
        } 
 
        for (i = 0; i < n; i++) 
            if (!visited[i] && at[i] <= current_time) { 
                queue[rear++] = i; 
                visited[i] = 1; 
            } 
 
        if (rt[cur] > 0) queue[rear++] = cur; 
 
        if (front == rear && completed_count < n) { 
            int next_arrival = -1; 
            for (i = 0; i < n; i++) 
                if (!visited[i]) 
                    if (next_arrival == -1 || at[i] < at[next_arrival]) 
                        next_arrival = i; 
            current_time = at[next_arrival]; 
            queue[rear++] = next_arrival; 
            visited[next_arrival] = 1; 
        } 
    } 
 
    printf("\n------------------------------------------------------------\n"); 
    printf("PID\tAT\tBT\tCT\tTAT\tWT\n"); 
    printf("------------------------------------------------------------\n"); 
    for (i = 0; i < n; i++) 
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", pid[i], at[i], bt[i], ct[i], tat[i], wt[i]); 
 
    avg_tat = (float) total_tat / n; 
    avg_wt = (float) total_wt / n; 
 
    printf("\nAverage Turnaround Time = %.2f", avg_tat); 
    printf("\nAverage Waiting Time    = %.2f\n", avg_wt); 
 
    return 0; 
} 
